# This is a basic workflow to help you get started with Actions

name: CI on every push

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - jethub**
      - jethome**
      - add**
  pull_request:
    branches:
      - jethub**
      - jethome**
      - add**

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: [ self-hosted, x64 ]
    
    strategy:
       #fail-fast: false
       matrix:
          board: [jethubj80, jethubj100]
          uver: [focal, hirsute]
          kver: [current, edge]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Fix Permitions
        run: sudo chown -R actions:actions /home/actions/actions-runner/_work/

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set env variables
        run: |
         echo "JETHOME_CI_DEBS_DIR=testing" >> $GITHUB_ENV;
         echo "JETHOME_CI_FIRMW_DIR=testing" >> $GITHUB_ENV;
         echo "SUDO_USER=actions" >>$GITHUB_ENV;
         echo "TERM=xterm" >> $GITHUB_ENV;

      - name: Copy key
        run: |
         cp /home/actions/exported.key ./

      - name: Fix docker exec template (disable terminal)
        run: sed -i 's/-it --rm /-i --rm /' config/templates/config-docker.conf

      - name: Fix main.sh to import key
        run: |
         echo "#!/bin/bash" >lib/main2.sh
         echo "gpg --import \${SRC}/exported.key || exit_with_error \"Unable to import key\"" >>lib/main2.sh
         cat lib/main.sh >>lib/main2.sh
         rm lib/main.sh
         mv lib/main2.sh lib/main.sh

      - name: Compile
        run: |
         ./compile.sh docker BOARD=${{ matrix.board }} LIB_TAG=${GITHUB_REF##*/} GPG_PASS=fakepass CLEAN_LEVEL="make,alldebs,cache" BRANCH=${{ matrix.kver }} RELEASE=${{ matrix.uver }} BUILD_MINIMAL=no BUILD_DESKTOP=no KERNEL_ONLY=no KERNEL_CONFIGURE=no COMPRESS_OUTPUTIMAGE=sha,gpg,img,xz;

      - name: Upload images
        run: |
         rsync -av output/images/Armbian_*_Jethubj*_*.img.* repo@update.jethome.ru:/var/www/update.jethome.ru/armbian/$JETHOME_CI_FIRMW_DIR/

